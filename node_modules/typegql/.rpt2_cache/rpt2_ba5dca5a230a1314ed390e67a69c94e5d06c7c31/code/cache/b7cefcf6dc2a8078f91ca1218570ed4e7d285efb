{"code":"import { isOutputType, GraphQLNonNull, } from 'graphql';\r\nimport { FieldError } from '../index';\r\nimport { resolveTypeOrThrow, inferTypeOrThrow } from './fieldType';\r\nimport { mutationFieldsRegistry, queryFieldsRegistry, isSchemaRoot, } from '~/domains/schema';\r\nexport function resolveRegisteredOrInferedType(target, fieldName, forcedType) {\r\n    if (forcedType) {\r\n        return resolveTypeOrThrow(forcedType, target, fieldName);\r\n    }\r\n    return inferTypeOrThrow(target, fieldName);\r\n}\r\nexport function validateResolvedType(target, fieldName, type) {\r\n    if (!isOutputType(type)) {\r\n        throw new FieldError(target, fieldName, `Validation of type failed. Resolved type for @Field must be GraphQLOutputType.`);\r\n    }\r\n    return true;\r\n}\r\nexport function enhanceType(originalType, isNullable) {\r\n    let finalType = originalType;\r\n    if (!isNullable) {\r\n        finalType = new GraphQLNonNull(finalType);\r\n    }\r\n    return finalType;\r\n}\r\nexport function isRootFieldOnNonRootBase(base, fieldName) {\r\n    const isRoot = isSchemaRoot(base);\r\n    if (isRoot) {\r\n        return false;\r\n    }\r\n    if (mutationFieldsRegistry.has(base, fieldName)) {\r\n        return true;\r\n    }\r\n    if (queryFieldsRegistry.has(base, fieldName)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n//# sourceMappingURL=services.js.map","map":"{\"version\":3,\"file\":\"services.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/domains/field/compiler/services.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EACL,YAAY,EAGZ,cAAc,GACf,MAAM,SAAS,CAAC;AACjB,OAAO,EAAE,UAAU,EAAE,MAAM,UAAU,CAAC;AAEtC,OAAO,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,MAAM,aAAa,CAAC;AACnE,OAAO,EACL,sBAAsB,EACtB,mBAAmB,EACnB,YAAY,GACb,MAAM,kBAAkB,CAAC;AAE1B,MAAM,UAAU,8BAA8B,CAC5C,MAAgB,EAChB,SAAiB,EACjB,UAAgB;IAEhB,IAAI,UAAU,EAAE;QACd,OAAO,kBAAkB,CAAC,UAAU,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;KAC1D;IACD,OAAO,gBAAgB,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AAC7C,CAAC;AAED,MAAM,UAAU,oBAAoB,CAClC,MAAgB,EAChB,SAAiB,EACjB,IAAiB;IAEjB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE;QACvB,MAAM,IAAI,UAAU,CAClB,MAAM,EACN,SAAS,EACT,gFAAgF,CACjF,CAAC;KACH;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,MAAM,UAAU,WAAW,CACzB,YAA+B,EAC/B,UAAmB;IAEnB,IAAI,SAAS,GAAG,YAAY,CAAC;IAC7B,IAAI,CAAC,UAAU,EAAE;QACf,SAAS,GAAG,IAAI,cAAc,CAAC,SAAS,CAAC,CAAC;KAC3C;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,MAAM,UAAU,wBAAwB,CAAC,IAAc,EAAE,SAAiB;IACxE,MAAM,MAAM,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;IAClC,IAAI,MAAM,EAAE;QACV,OAAO,KAAK,CAAC;KACd;IACD,IAAI,sBAAsB,CAAC,GAAG,CAAC,IAAI,EAAE,SAAS,CAAC,EAAE;QAC/C,OAAO,IAAI,CAAC;KACb;IACD,IAAI,mBAAmB,CAAC,GAAG,CAAC,IAAI,EAAE,SAAS,CAAC,EAAE;QAC5C,OAAO,IAAI,CAAC;KACb;IACD,OAAO,KAAK,CAAC;AACf,CAAC\"}","dts":{"name":"/Users/adampietrasiak/dev/oss/typegql/domains/field/compiler/services.d.ts","writeByteOrderMark":false,"text":"import { GraphQLType, GraphQLOutputType } from 'graphql';\r\nexport declare function resolveRegisteredOrInferedType(target: Function, fieldName: string, forcedType?: any): GraphQLType;\r\nexport declare function validateResolvedType(target: Function, fieldName: string, type: GraphQLType): type is GraphQLOutputType;\r\nexport declare function enhanceType(originalType: GraphQLOutputType, isNullable: boolean): GraphQLOutputType;\r\nexport declare function isRootFieldOnNonRootBase(base: Function, fieldName: string): boolean;\r\n"}}
