{"code":"import { GraphQLString, GraphQLFloat, GraphQLBoolean, } from 'graphql';\r\nimport 'reflect-metadata';\r\nexport function isParsableScalar(input) {\r\n    return [String, Number, Boolean].includes(input);\r\n}\r\nexport function parseNativeTypeToGraphQL(input) {\r\n    if (input === String) {\r\n        return GraphQLString;\r\n    }\r\n    if (input === Number) {\r\n        return GraphQLFloat;\r\n    }\r\n    if (input === Boolean) {\r\n        return GraphQLBoolean;\r\n    }\r\n}\r\nexport function inferTypeByTarget(target, key) {\r\n    if (!key) {\r\n        return Reflect.getMetadata('design:type', target);\r\n    }\r\n    const returnType = Reflect.getMetadata('design:returntype', target, key);\r\n    if (returnType) {\r\n        return returnType;\r\n    }\r\n    const type = Reflect.getMetadata('design:type', target, key);\r\n    return type;\r\n}\r\n//# sourceMappingURL=parseNative.js.map","map":"{\"version\":3,\"file\":\"parseNative.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/utils/gql/types/parseNative.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EACL,aAAa,EACb,YAAY,EACZ,cAAc,GAEf,MAAM,SAAS,CAAC;AACjB,OAAO,kBAAkB,CAAC;AAG1B,MAAM,UAAU,gBAAgB,CAAC,KAAU;IACzC,OAAO,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACnD,CAAC;AAED,MAAM,UAAU,wBAAwB,CAAC,KAAU;IACjD,IAAI,KAAK,KAAK,MAAM,EAAE;QACpB,OAAO,aAAa,CAAC;KACtB;IACD,IAAI,KAAK,KAAK,MAAM,EAAE;QACpB,OAAO,YAAY,CAAC;KACrB;IACD,IAAI,KAAK,KAAK,OAAO,EAAE;QACrB,OAAO,cAAc,CAAC;KACvB;AACH,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,MAAgB,EAAE,GAAY;IAC9D,IAAI,CAAC,GAAG,EAAE;QACR,OAAO,OAAO,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;KACnD;IAED,MAAM,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC,mBAAmB,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;IACzE,IAAI,UAAU,EAAE;QACd,OAAO,UAAU,CAAC;KACnB;IAED,MAAM,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;IAC7D,OAAO,IAAI,CAAC;AACd,CAAC\"}","dts":{"name":"/Users/adampietrasiak/dev/oss/typegql/services/utils/gql/types/parseNative.d.ts","writeByteOrderMark":false,"text":"import { GraphQLScalarType } from 'graphql';\r\nimport 'reflect-metadata';\r\nexport declare type ParsableScalar = String | Number | Boolean;\r\nexport declare function isParsableScalar(input: any): input is ParsableScalar;\r\nexport declare function parseNativeTypeToGraphQL(input: any): GraphQLScalarType;\r\nexport declare function inferTypeByTarget(target: Function, key?: string): any;\r\n"}}
