{"code":"import { GraphQLSchema, GraphQLObjectType } from 'graphql';\r\nimport { queryFieldsRegistry, mutationFieldsRegistry, } from './registry';\r\nimport { SchemaRootError } from './error';\r\nimport { showDeprecationWarning } from '~/services/utils';\r\nimport { validateSchemaRoots } from \"./services\";\r\nfunction getAllRootFieldsFromRegistry(roots, registry, name) {\r\n    const allRootFields = {};\r\n    for (let root of roots) {\r\n        const rootFields = registry.getAll(root);\r\n        Object.keys(rootFields).forEach(fieldName => {\r\n            const fieldConfigGetter = rootFields[fieldName];\r\n            const fieldConfig = fieldConfigGetter();\r\n            // throw error if root field with this name is already registered\r\n            if (!!allRootFields[fieldName]) {\r\n                throw new SchemaRootError(root, `Duplicate of root field name: '${fieldName}'. Seems this name is also used inside other schema root.`);\r\n            }\r\n            allRootFields[fieldName] = fieldConfig;\r\n        });\r\n    }\r\n    const isEmpty = Object.keys(allRootFields).length < 1;\r\n    if (isEmpty) {\r\n        return null;\r\n    }\r\n    return new GraphQLObjectType({\r\n        name,\r\n        fields: allRootFields,\r\n    });\r\n}\r\nexport function compileSchema(config) {\r\n    const roots = typeof config === 'function' ? [config] : config.roots;\r\n    if (typeof config === 'function') {\r\n        showDeprecationWarning(`Passing schema root to compileSchema is deprecated. Use config object with 'roots' field. compileSchema(SchemaRoot) --> compileSchema({ roots: [SchemaRoot] })`, config);\r\n    }\r\n    validateSchemaRoots(roots);\r\n    const query = getAllRootFieldsFromRegistry(roots, queryFieldsRegistry, 'Query');\r\n    const mutation = getAllRootFieldsFromRegistry(roots, mutationFieldsRegistry, 'Mutation');\r\n    if (!query) {\r\n        throw new Error('At least one of schema roots must have @Query root field.');\r\n    }\r\n    return new GraphQLSchema({\r\n        query: query || undefined,\r\n        mutation: mutation || undefined,\r\n    });\r\n}\r\n//# sourceMappingURL=compiler.js.map","map":"{\"version\":3,\"file\":\"compiler.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/domains/schema/compiler.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,aAAa,EAAE,iBAAiB,EAAsB,MAAM,SAAS,CAAC;AAC/E,OAAO,EACL,mBAAmB,EACnB,sBAAsB,GAEvB,MAAM,YAAY,CAAC;AACpB,OAAO,EAAE,eAAe,EAAE,MAAM,SAAS,CAAC;AAC1C,OAAO,EAAE,sBAAsB,EAAE,MAAM,kBAAkB,CAAC;AAE1D,OAAO,EAAE,mBAAmB,EAAE,MAAM,YAAY,CAAC;AAMjD,SAAS,4BAA4B,CACnC,KAAiB,EACjB,QAA4B,EAC5B,IAA0B;IAE1B,MAAM,aAAa,GAAoD,EAAE,CAAC;IAC1E,KAAK,IAAI,IAAI,IAAI,KAAK,EAAE;QACtB,MAAM,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACzC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;YAC1C,MAAM,iBAAiB,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC;YAChD,MAAM,WAAW,GAAG,iBAAiB,EAAE,CAAC;YAExC,iEAAiE;YACjE,IAAI,CAAC,CAAC,aAAa,CAAC,SAAS,CAAC,EAAE;gBAC9B,MAAM,IAAI,eAAe,CACvB,IAAI,EACJ,kCAAkC,SAAS,2DAA2D,CACvG,CAAC;aACH;YACD,aAAa,CAAC,SAAS,CAAC,GAAG,WAAW,CAAC;QACzC,CAAC,CAAC,CAAC;KACJ;IAED,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;IAEtD,IAAI,OAAO,EAAE;QACX,OAAO,IAAI,CAAC;KACb;IAED,OAAO,IAAI,iBAAiB,CAAC;QAC3B,IAAI;QACJ,MAAM,EAAE,aAAa;KACtB,CAAC,CAAC;AACL,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,MAAuC;IACnE,MAAM,KAAK,GAAG,OAAO,MAAM,KAAK,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;IAErE,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE;QAChC,sBAAsB,CACpB,gKAAgK,EAChK,MAAM,CACP,CAAC;KACH;IAED,mBAAmB,CAAC,KAAK,CAAC,CAAC;IAE3B,MAAM,KAAK,GAAG,4BAA4B,CACxC,KAAK,EACL,mBAAmB,EACnB,OAAO,CACR,CAAC;IACF,MAAM,QAAQ,GAAG,4BAA4B,CAC3C,KAAK,EACL,sBAAsB,EACtB,UAAU,CACX,CAAC;IAEF,IAAI,CAAC,KAAK,EAAE;QACV,MAAM,IAAI,KAAK,CACb,2DAA2D,CAC5D,CAAC;KACH;IAED,OAAO,IAAI,aAAa,CAAC;QACvB,KAAK,EAAE,KAAK,IAAI,SAAS;QACzB,QAAQ,EAAE,QAAQ,IAAI,SAAS;KAChC,CAAC,CAAC;AACL,CAAC\"}","dts":{"name":"/Users/adampietrasiak/dev/oss/typegql/domains/schema/compiler.d.ts","writeByteOrderMark":false,"text":"import { GraphQLSchema } from 'graphql';\r\nexport interface CompileSchemaOptions {\r\n    roots: Function[];\r\n}\r\nexport declare function compileSchema(config: CompileSchemaOptions | Function): GraphQLSchema;\r\n"}}
