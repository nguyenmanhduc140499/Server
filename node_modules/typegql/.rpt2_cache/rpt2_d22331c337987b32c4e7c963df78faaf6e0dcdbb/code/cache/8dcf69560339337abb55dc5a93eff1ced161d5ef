{"code":"import { inferTypeByTarget } from '~/services/utils';\r\nimport { InputFieldError } from '../index';\r\nimport { resolveType } from '~/services/utils';\r\nexport function resolveTypeOrThrow(type, target, fieldName) {\r\n    var resolvedType = resolveType(type, true);\r\n    if (!resolvedType) {\r\n        throw new InputFieldError(target, fieldName, \"Forced type is incorrect. Make sure to use either native graphql type or class that is registered with @Type decorator\");\r\n    }\r\n    return resolvedType;\r\n}\r\nexport function inferTypeOrThrow(target, fieldName) {\r\n    var inferedType = inferTypeByTarget(target.prototype, fieldName);\r\n    if (!inferedType) {\r\n        throw new InputFieldError(target, fieldName, \"Could not infer return type and no type is forced. In case of circular dependencies make sure to force types of instead of infering them.\");\r\n    }\r\n    return resolveType(inferedType, true);\r\n}\r\n//# sourceMappingURL=fieldType.js.map","map":"{\"version\":3,\"file\":\"fieldType.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/domains/inputField/compiler/fieldType.ts\"],\"names\":[],\"mappings\":\"AACA,OAAO,EAAE,iBAAiB,EAAE,MAAM,kBAAkB,CAAC;AACrD,OAAO,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AAE3C,OAAO,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAE/C,MAAM,UAAU,kBAAkB,CAChC,IAAS,EACT,MAAgB,EAChB,SAAiB;IAEjB,IAAM,YAAY,GAAG,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAE7C,IAAI,CAAC,YAAY,EAAE;QACjB,MAAM,IAAI,eAAe,CACvB,MAAM,EACN,SAAS,EACT,wHAAwH,CACzH,CAAC;KACH;IAED,OAAO,YAAY,CAAC;AACtB,CAAC;AAED,MAAM,UAAU,gBAAgB,CAC9B,MAAgB,EAChB,SAAiB;IAEjB,IAAM,WAAW,GAAG,iBAAiB,CAAC,MAAM,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IACnE,IAAI,CAAC,WAAW,EAAE;QAChB,MAAM,IAAI,eAAe,CACvB,MAAM,EACN,SAAS,EACT,2IAA2I,CAC5I,CAAC;KACH;IACD,OAAO,WAAW,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;AACxC,CAAC\"}"}
